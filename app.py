import streamlit as st
import time
from chatbot import CNTTChatbot
from config import CHATBOT_NAME, CHATBOT_DESCRIPTION
import os

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title=CHATBOT_NAME,    
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS theme t·ªëi nh∆∞ ChatGPT
st.markdown("""
<style>
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Global dark theme */
    .stApp {
        font-family: 'Inter', sans-serif;
        background: #0f0f0f;
        color: #ffffff;
    }
    
    /* Main container */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
        max-width: 1200px;
        background: #0f0f0f;
    }
    
    
    /* Chat messages styling */
    .stChatMessage {
        margin: 1rem 0;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    /* User message */
    .stChatMessage[data-testid="user-message"] {
        background: #1a1a1a;
        color: white;
        margin-left: 10%;
        border: 1px solid #333;
    }
    
    /* Assistant message */
    .stChatMessage[data-testid="assistant-message"] {
        background: #1a1a1a;
        color: white;
        margin-right: 10%;
        border: 1px solid #333;
    }
    
    /* Chat input area - FIX cho input */
    .stTextArea textarea {
        border-radius: 15px;
        border: 2px solid #333;
        background: #1a1a1a !important;
        color: white !important;
        font-size: 1rem;
        padding: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    .stTextArea textarea:focus {
        border-color: #4a9eff;
        box-shadow: 0 0 0 3px rgba(74, 158, 255, 0.2);
        background: #1a1a1a !important;
        color: white !important;
    }
    
    .stTextArea textarea::placeholder {
        color: #888 !important;
    }
    
    /* Buttons styling */
    .stButton > button {
        border-radius: 12px;
        border: none;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
    }
    
    /* Primary button */
    .stButton > button[kind="primary"] {
        background: linear-gradient(135deg, #4a9eff 0%, #0066cc 100%);
        color: white;
    }
    
    /* Secondary button */
    .stButton > button[kind="secondary"] {
        background: #2d2d2d;
        color: white;
        border: 1px solid #444;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: #1a1a1a;
        border-radius: 15px;
        margin: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        border: 1px solid #333;
    }
    
    /* Sidebar text color fix */
    .css-1d391kg h1, 
    .css-1d391kg h2, 
    .css-1d391kg h3, 
    .css-1d391kg p, 
    .css-1d391kg div,
    .css-1d391kg span,
    .css-1d391kg label {
        color: white !important;
    }
    
    .sidebar-info {
        background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        border: 1px solid #333;
    }
    
    .sidebar-info h3 {
        color: white;
        font-weight: 600;
        margin-bottom: 1rem;
    }
    
    .sidebar-info ul {
        list-style: none;
        padding: 0;
    }
    
    .sidebar-info li {
        padding: 0.5rem 0;
        border-bottom: 1px solid #333;
        font-size: 0.9rem;
        color: #cccccc;
    }
    
    /* Suggested questions */
    .suggested-question {
        background: #2d2d2d;
        border: 1px solid #444;
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
        color: white;
        font-size: 0.9rem;
        text-align: left;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    .suggested-question:hover {
        background: #4a9eff;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(74, 158, 255, 0.3);
        border-color: #4a9eff;
    }
    
    /* Metrics styling */
    .metric-container {
        background: #1a1a1a;
        border: 1px solid #333;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        color: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    /* Loading spinner */
    .stSpinner {
        color: #4a9eff;
    }
    
    /* Form styling */
    .stForm {
        background: #1a1a1a;
        border: 1px solid #333;
        border-radius: 20px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }
    
    /* Scrollbar styling */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #1a1a1a;
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #444;
        border-radius: 10px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #666;
    }
    
    /* Animation keyframes */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .stChatMessage {
        animation: fadeInUp 0.5s ease-out;
    }
    
    
    /* Welcome message styling */
    .welcome-message {
        text-align: center;
        padding: 3rem 2rem;
        color: #cccccc;
        background: #1a1a1a;
        border-radius: 15px;
        margin: 2rem 0;
        border: 1px solid #333;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    
    /* Fix cho t·∫•t c·∫£ text elements */
    .stMarkdown, .stMarkdown p, .stMarkdown h1, .stMarkdown h2, .stMarkdown h3, .stMarkdown h4, .stMarkdown h5, .stMarkdown h6 {
        color: white !important;
    }
    
    /* Fix cho metrics */
    .metric-container .metric-value {
        color: white !important;
    }
    
    /* Fix cho labels */
    .stTextArea label {
        color: white !important;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 2rem;
        }
        
        .stChatMessage[data-testid="user-message"],
        .stChatMessage[data-testid="assistant-message"] {
            margin-left: 0;
            margin-right: 0;
        }
        
        .chat-container {
            padding: 1rem;
            margin: 0.5rem 0;
        }
        
        .main-header {
            padding: 1.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

def initialize_chatbot():
    """Kh·ªüi t·∫°o chatbot"""
    if 'chatbot' not in st.session_state:
        try:
            st.session_state.chatbot = CNTTChatbot()
        except ValueError as e:
            st.error(f"L·ªói kh·ªüi t·∫°o chatbot: {e}")
            st.error("Vui l√≤ng ki·ªÉm tra file .env v√† ƒë·∫£m b·∫£o GEMINI_API_KEY ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng.")
            st.stop()
    
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    if 'chat_sessions' not in st.session_state:
        st.session_state.chat_sessions = []


def main():
    # Kh·ªüi t·∫°o chatbot
    initialize_chatbot()
    
    # Sidebar v·ªõi l·ªãch s·ª≠ chat
    with st.sidebar:
        # Header cho sidebar
        st.markdown("### üí¨ L·ªãch s·ª≠ chat")
        
        # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat c≈© (lu√¥n hi·ªÉn th·ªã t·ª´ chatbot history)
        import datetime
        
        # L·∫•y t·∫•t c·∫£ tin nh·∫Øn t·ª´ chatbot history
        all_messages = st.session_state.chatbot.get_chat_history()
        
        if all_messages:
            # Nh√≥m tin nh·∫Øn theo session (m·ªói session l√† m·ªôt cu·ªôc tr√≤ chuy·ªán ho√†n ch·ªânh)
            sessions = []
            
            for msg in all_messages:
                if 'user_message' in msg and 'bot_response' in msg:
                    # T·∫°o session m·ªõi cho m·ªói c·∫∑p user-bot
                    session = {
                        'user': msg['user_message'],
                        'bot': msg['bot_response'],
                        'timestamp': msg.get('timestamp', ''),
                        'id': len(sessions)
                    }
                    sessions.append(session)
            
            # Hi·ªÉn th·ªã c√°c session chat
            for session in sessions[-10:]:  # Ch·ªâ hi·ªÉn th·ªã 10 session g·∫ßn nh·∫•t
                user_msg = session['user']
                # R√∫t g·ªçn tin nh·∫Øn n·∫øu qu√° d√†i
                display_msg = user_msg[:40] + "..." if len(user_msg) > 40 else user_msg
                
                # Format th·ªùi gian
                time_str = ""
                if session['timestamp']:
                    try:
                        dt = datetime.datetime.fromisoformat(session['timestamp'].replace('Z', '+00:00'))
                        time_str = dt.strftime("%H:%M")
                    except:
                        time_str = ""
                
                if st.button(
                    f"üí≠ {display_msg}" + (f" ({time_str})" if time_str else ""),
                    key=f"load_session_{session['id']}",
                    use_container_width=True,
                    help=f"Click ƒë·ªÉ xem cu·ªôc tr√≤ chuy·ªán: {user_msg}"
                ):
                    # Load l·∫°i session n√†y
                    st.session_state.messages = [
                        {"role": "user", "content": session['user']},
                        {"role": "assistant", "content": session['bot']}
                    ]
                    st.rerun()
        else:
            st.info("Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o")
        
        st.markdown("---")
        
        # N√∫t t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
        if st.button("‚ûï Cu·ªôc tr√≤ chuy·ªán m·ªõi", type="primary", use_container_width=True):
            # Ch·ªâ x√≥a tin nh·∫Øn hi·ªán t·∫°i, kh√¥ng x√≥a l·ªãch s·ª≠
            st.session_state.messages = []
            st.success("‚úÖ ƒê√£ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi!")
            st.rerun()
        
        # N√∫t x√≥a l·ªãch s·ª≠
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat", type="secondary", use_container_width=True):
            st.session_state.chatbot.clear_history()
            st.session_state.messages = []
            st.success("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ chat!")
            st.rerun()
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat ho·∫∑c welcome message
    if st.session_state.messages:
        for i, message in enumerate(st.session_state.messages):
            if message["role"] == "user":
                with st.chat_message("user"):
                    st.markdown(f"**üë§ B·∫°n:** {message['content']}")
            else:
                with st.chat_message("assistant"):
                    st.markdown(f"**ü§ñ {CHATBOT_NAME}:** {message['content']}")
    else:
        # Welcome message khi ch∆∞a c√≥ tin nh·∫Øn
        st.markdown("""
        <div class="welcome-message">
            <h3>üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CNTT Chatbot!</h3>
            <p>H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán b·∫±ng c√°ch nh·∫≠p c√¢u h·ªèi b√™n d∆∞·ªõi ho·∫∑c ch·ªçn m·ªôt c√¢u h·ªèi g·ª£i √Ω.</p>
        </div>
        """, unsafe_allow_html=True)
        
    # Sidebar v·ªõi suggested questions
    with st.sidebar:
        # C√¢u h·ªèi g·ª£i √Ω v·ªõi design t·ªëi
        st.markdown("### üí° C√¢u h·ªèi g·ª£i √Ω")
        st.markdown("Ch·ªçn m·ªôt c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán:")
        
        suggested_questions = st.session_state.chatbot.get_suggested_questions()
        
        for i, question in enumerate(suggested_questions):
            if st.button(
                f"üí≠ {question}", 
                key=f"suggest_{i}", 
                use_container_width=True,
                help="Nh·∫•p ƒë·ªÉ s·ª≠ d·ª•ng c√¢u h·ªèi n√†y"
            ):
                st.session_state.suggested_question = question
                st.rerun()
        
    
    # X·ª≠ l√Ω tin nh·∫Øn
    # TH√äM KH·ªêI M·ªöI N√ÄY V√ÄO CU·ªêI H√ÄM MAIN()

    # X·ª≠ l√Ω input (ho·∫∑c t·ª´ chat_input ho·∫∑c t·ª´ c√¢u h·ªèi g·ª£i √Ω)
    
    # Ki·ªÉm tra xem c√≥ c√¢u h·ªèi g·ª£i √Ω n√†o ƒë∆∞·ª£c click kh√¥ng (set trong sidebar)
    if hasattr(st.session_state, 'suggested_question'):
        user_input = st.session_state.suggested_question
        del st.session_state.suggested_question # X√≥a ƒëi ƒë·ªÉ kh√¥ng b·ªã l·∫∑p l·∫°i
    else:
        user_input = None
        
    # L·∫•y input t·ª´ st.chat_input (thanh nh·∫≠p li·ªáu ·ªü d∆∞·ªõi c√πng)
    if prompt := st.chat_input("V√≠ d·ª•: T√¥i n√™n h·ªçc ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o tr∆∞·ªõc?"):
        user_input = prompt # Ghi ƒë√® user_input n·∫øu ng∆∞·ªùi d√πng g√µ

    # N·∫øu c√≥ user_input (t·ª´ 1 trong 2 ngu·ªìn)
    if user_input:
        # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
        with st.chat_message("user"):
            st.markdown(f"**üë§ B·∫°n:** {user_input}")
        
        # Hi·ªÉn th·ªã typing indicator v√† loading
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ ƒêang suy nghƒ©..."):
                response = st.session_state.chatbot.get_response(user_input)
        
        # Th√™m ph·∫£n h·ªìi bot
        st.session_state.messages.append({"role": "assistant", "content": response})
        
        # Rerun ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi c·ªßa bot t·ª´ history
        st.rerun()

if __name__ == "__main__":
    main()
